/* tslint:disable */
/* eslint-disable */
/**
 * Render Public API
 * Manage everything about your Render services
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@render.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  Job,
  ListJob200ResponseInner,
  ModelError,
  PostJobRequest,
} from '../models/index.ts';
import {
    JobFromJSON,
    JobToJSON,
    ListJob200ResponseInnerFromJSON,
    ListJob200ResponseInnerToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    PostJobRequestFromJSON,
    PostJobRequestToJSON,
} from '../models/index.ts';

export interface GetJobRequest {
    serviceId: string;
    jobId: string;
}

export interface ListJobRequest {
    serviceId: string;
    cursor?: string;
    limit?: number;
    status?: Array<ListJobStatusEnum>;
    createdBefore?: Date;
    createdAfter?: Date;
    startedBefore?: Date;
    startedAfter?: Date;
    finishedBefore?: Date;
    finishedAfter?: Date;
}

export interface PostJobOperationRequest {
    serviceId: string;
    postJobRequest: PostJobRequest;
}

/**
 * 
 */
export class JobsApi extends runtime.BaseAPI {

    /**
     * Retrieve job
     */
    async getJobRaw(requestParameters: GetJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Job>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling getJob.');
        }

        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling getJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/{serviceId}/jobs/{jobId}`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))).replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobFromJSON(jsonValue));
    }

    /**
     * Retrieve job
     */
    async getJob(requestParameters: GetJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Job> {
        const response = await this.getJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List jobs
     */
    async listJobRaw(requestParameters: ListJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ListJob200ResponseInner>>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling listJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.createdBefore !== undefined) {
            queryParameters['createdBefore'] = (requestParameters.createdBefore as any).toISOString();
        }

        if (requestParameters.createdAfter !== undefined) {
            queryParameters['createdAfter'] = (requestParameters.createdAfter as any).toISOString();
        }

        if (requestParameters.startedBefore !== undefined) {
            queryParameters['startedBefore'] = (requestParameters.startedBefore as any).toISOString();
        }

        if (requestParameters.startedAfter !== undefined) {
            queryParameters['startedAfter'] = (requestParameters.startedAfter as any).toISOString();
        }

        if (requestParameters.finishedBefore !== undefined) {
            queryParameters['finishedBefore'] = (requestParameters.finishedBefore as any).toISOString();
        }

        if (requestParameters.finishedAfter !== undefined) {
            queryParameters['finishedAfter'] = (requestParameters.finishedAfter as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/{serviceId}/jobs`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListJob200ResponseInnerFromJSON));
    }

    /**
     * List jobs
     */
    async listJob(requestParameters: ListJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ListJob200ResponseInner>> {
        const response = await this.listJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create job
     */
    async postJobRaw(requestParameters: PostJobOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Job>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling postJob.');
        }

        if (requestParameters.postJobRequest === null || requestParameters.postJobRequest === undefined) {
            throw new runtime.RequiredError('postJobRequest','Required parameter requestParameters.postJobRequest was null or undefined when calling postJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/{serviceId}/jobs`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostJobRequestToJSON(requestParameters.postJobRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobFromJSON(jsonValue));
    }

    /**
     * Create job
     */
    async postJob(requestParameters: PostJobOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Job> {
        const response = await this.postJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListJobStatusEnum = {
    PENDING: 'pending',
    RUNNING: 'running',
    SUCCEEDED: 'succeeded',
    FAILED: 'failed',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
} as const;
export type ListJobStatusEnum = typeof ListJobStatusEnum[keyof typeof ListJobStatusEnum];
