/* tslint:disable */
/* eslint-disable */
/**
 * Render Public API
 * Manage everything about your Render services
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@render.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  CreateDeployRequest,
  Deploy,
  GetDeploys200ResponseInner,
  ModelError,
} from '../models/index.ts';
import {
    CreateDeployRequestFromJSON,
    CreateDeployRequestToJSON,
    DeployFromJSON,
    DeployToJSON,
    GetDeploys200ResponseInnerFromJSON,
    GetDeploys200ResponseInnerToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index.ts';

export interface CreateDeployOperationRequest {
    serviceId: string;
    createDeployRequest: CreateDeployRequest;
}

export interface GetDeployRequest {
    serviceId: string;
    deployId: string;
}

export interface GetDeploysRequest {
    serviceId: string;
    startTime?: number;
    endTime?: number;
    cursor?: string;
    limit?: number;
}

/**
 * 
 */
export class DeploysApi extends runtime.BaseAPI {

    /**
     * Trigger a deploy
     */
    async createDeployRaw(requestParameters: CreateDeployOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Deploy>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling createDeploy.');
        }

        if (requestParameters.createDeployRequest === null || requestParameters.createDeployRequest === undefined) {
            throw new runtime.RequiredError('createDeployRequest','Required parameter requestParameters.createDeployRequest was null or undefined when calling createDeploy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/{serviceId}/deploys`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeployRequestToJSON(requestParameters.createDeployRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeployFromJSON(jsonValue));
    }

    /**
     * Trigger a deploy
     */
    async createDeploy(requestParameters: CreateDeployOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Deploy> {
        const response = await this.createDeployRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve deploy
     */
    async getDeployRaw(requestParameters: GetDeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Deploy>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling getDeploy.');
        }

        if (requestParameters.deployId === null || requestParameters.deployId === undefined) {
            throw new runtime.RequiredError('deployId','Required parameter requestParameters.deployId was null or undefined when calling getDeploy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/{serviceId}/deploys/{deployId}`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))).replace(`{${"deployId"}}`, encodeURIComponent(String(requestParameters.deployId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeployFromJSON(jsonValue));
    }

    /**
     * Retrieve deploy
     */
    async getDeploy(requestParameters: GetDeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Deploy> {
        const response = await this.getDeployRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List deploys
     */
    async getDeploysRaw(requestParameters: GetDeploysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetDeploys200ResponseInner>>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling getDeploys.');
        }

        const queryParameters: any = {};

        if (requestParameters.startTime !== undefined) {
            queryParameters['startTime'] = requestParameters.startTime;
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['endTime'] = requestParameters.endTime;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/{serviceId}/deploys`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetDeploys200ResponseInnerFromJSON));
    }

    /**
     * List deploys
     */
    async getDeploys(requestParameters: GetDeploysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetDeploys200ResponseInner>> {
        const response = await this.getDeploysRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
