/* tslint:disable */
/* eslint-disable */
/**
 * Render Public API
 * Manage everything about your Render services
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@render.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.ts';
import type { ServicePATCHServiceDetails } from './ServicePATCHServiceDetails.ts';
import {
    ServicePATCHServiceDetailsFromJSON,
    ServicePATCHServiceDetailsFromJSONTyped,
    ServicePATCHServiceDetailsToJSON,
} from './ServicePATCHServiceDetails.ts';

/**
 * 
 * @export
 * @interface ServicePATCH
 */
export interface ServicePATCH {
    /**
     * 
     * @type {string}
     * @memberof ServicePATCH
     */
    autoDeploy?: ServicePATCHAutoDeployEnum;
    /**
     * 
     * @type {string}
     * @memberof ServicePATCH
     */
    branch?: string;
    /**
     * 
     * @type {string}
     * @memberof ServicePATCH
     */
    name?: string;
    /**
     * 
     * @type {ServicePATCHServiceDetails}
     * @memberof ServicePATCH
     */
    serviceDetails?: ServicePATCHServiceDetails;
}


/**
 * @export
 */
export const ServicePATCHAutoDeployEnum = {
    TRUE: 'true',
    FALSE: 'false',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
} as const;
export type ServicePATCHAutoDeployEnum = typeof ServicePATCHAutoDeployEnum[keyof typeof ServicePATCHAutoDeployEnum];


/**
 * Check if a given object implements the ServicePATCH interface.
 */
export function instanceOfServicePATCH(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ServicePATCHFromJSON(json: any): ServicePATCH {
    return ServicePATCHFromJSONTyped(json, false);
}

export function ServicePATCHFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServicePATCH {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'autoDeploy': !exists(json, 'autoDeploy') ? undefined : json['autoDeploy'],
        'branch': !exists(json, 'branch') ? undefined : json['branch'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'serviceDetails': !exists(json, 'serviceDetails') ? undefined : ServicePATCHServiceDetailsFromJSON(json['serviceDetails']),
    };
}

export function ServicePATCHToJSON(value?: ServicePATCH | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'autoDeploy': value.autoDeploy,
        'branch': value.branch,
        'name': value.name,
        'serviceDetails': ServicePATCHServiceDetailsToJSON(value.serviceDetails),
    };
}

