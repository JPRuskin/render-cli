/* tslint:disable */
/* eslint-disable */
/**
 * Render Public API
 * Manage everything about your Render services
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@render.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.ts';
import type { Region } from './Region.ts';
import {
    RegionFromJSON,
    RegionFromJSONTyped,
    RegionToJSON,
} from './Region.ts';
import type { Resource } from './Resource.ts';
import {
    ResourceFromJSON,
    ResourceFromJSONTyped,
    ResourceToJSON,
} from './Resource.ts';
import type { ServerPort } from './ServerPort.ts';
import {
    ServerPortFromJSON,
    ServerPortFromJSONTyped,
    ServerPortToJSON,
} from './ServerPort.ts';
import type { ServiceEnv } from './ServiceEnv.ts';
import {
    ServiceEnvFromJSON,
    ServiceEnvFromJSONTyped,
    ServiceEnvToJSON,
} from './ServiceEnv.ts';
import type { StaticSiteDetailsParentServer } from './StaticSiteDetailsParentServer.ts';
import {
    StaticSiteDetailsParentServerFromJSON,
    StaticSiteDetailsParentServerFromJSONTyped,
    StaticSiteDetailsParentServerToJSON,
} from './StaticSiteDetailsParentServer.ts';
import type { WebServiceDetailsEnvSpecificDetails } from './WebServiceDetailsEnvSpecificDetails.ts';
import {
    WebServiceDetailsEnvSpecificDetailsFromJSON,
    WebServiceDetailsEnvSpecificDetailsFromJSONTyped,
    WebServiceDetailsEnvSpecificDetailsToJSON,
} from './WebServiceDetailsEnvSpecificDetails.ts';

/**
 * 
 * @export
 * @interface PrivateServiceDetails
 */
export interface PrivateServiceDetails {
    /**
     * 
     * @type {Resource}
     * @memberof PrivateServiceDetails
     */
    disk?: Resource;
    /**
     * 
     * @type {ServiceEnv}
     * @memberof PrivateServiceDetails
     */
    env: ServiceEnv;
    /**
     * 
     * @type {WebServiceDetailsEnvSpecificDetails}
     * @memberof PrivateServiceDetails
     */
    envSpecificDetails: WebServiceDetailsEnvSpecificDetails;
    /**
     * 
     * @type {number}
     * @memberof PrivateServiceDetails
     */
    numInstances: number;
    /**
     * 
     * @type {Array<ServerPort>}
     * @memberof PrivateServiceDetails
     */
    openPorts: Array<ServerPort>;
    /**
     * 
     * @type {StaticSiteDetailsParentServer}
     * @memberof PrivateServiceDetails
     */
    parentServer?: StaticSiteDetailsParentServer;
    /**
     * 
     * @type {string}
     * @memberof PrivateServiceDetails
     */
    plan: PrivateServiceDetailsPlanEnum;
    /**
     * 
     * @type {string}
     * @memberof PrivateServiceDetails
     */
    pullRequestPreviewsEnabled: PrivateServiceDetailsPullRequestPreviewsEnabledEnum;
    /**
     * 
     * @type {Region}
     * @memberof PrivateServiceDetails
     */
    region: Region;
    /**
     * 
     * @type {string}
     * @memberof PrivateServiceDetails
     */
    url: string;
}


/**
 * @export
 */
export const PrivateServiceDetailsPlanEnum = {
    STARTER: 'starter',
    STARTER_PLUS: 'starter_plus',
    STANDARD: 'standard',
    STANDARD_PLUS: 'standard_plus',
    PRO: 'pro',
    PRO_PLUS: 'pro_plus',
    PRO_MAX: 'pro_max',
    PRO_ULTRA: 'pro_ultra',
    CUSTOM: 'custom',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
} as const;
export type PrivateServiceDetailsPlanEnum = typeof PrivateServiceDetailsPlanEnum[keyof typeof PrivateServiceDetailsPlanEnum];

/**
 * @export
 */
export const PrivateServiceDetailsPullRequestPreviewsEnabledEnum = {
    TRUE: 'true',
    FALSE: 'false',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
} as const;
export type PrivateServiceDetailsPullRequestPreviewsEnabledEnum = typeof PrivateServiceDetailsPullRequestPreviewsEnabledEnum[keyof typeof PrivateServiceDetailsPullRequestPreviewsEnabledEnum];


/**
 * Check if a given object implements the PrivateServiceDetails interface.
 */
export function instanceOfPrivateServiceDetails(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "env" in value;
    isInstance = isInstance && "envSpecificDetails" in value;
    isInstance = isInstance && "numInstances" in value;
    isInstance = isInstance && "openPorts" in value;
    isInstance = isInstance && "plan" in value;
    isInstance = isInstance && "pullRequestPreviewsEnabled" in value;
    isInstance = isInstance && "region" in value;
    isInstance = isInstance && "url" in value;

    return isInstance;
}

export function PrivateServiceDetailsFromJSON(json: any): PrivateServiceDetails {
    return PrivateServiceDetailsFromJSONTyped(json, false);
}

export function PrivateServiceDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PrivateServiceDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'disk': !exists(json, 'disk') ? undefined : ResourceFromJSON(json['disk']),
        'env': ServiceEnvFromJSON(json['env']),
        'envSpecificDetails': WebServiceDetailsEnvSpecificDetailsFromJSON(json['envSpecificDetails']),
        'numInstances': json['numInstances'],
        'openPorts': ((json['openPorts'] as Array<any>).map(ServerPortFromJSON)),
        'parentServer': !exists(json, 'parentServer') ? undefined : StaticSiteDetailsParentServerFromJSON(json['parentServer']),
        'plan': json['plan'],
        'pullRequestPreviewsEnabled': json['pullRequestPreviewsEnabled'],
        'region': RegionFromJSON(json['region']),
        'url': json['url'],
    };
}

export function PrivateServiceDetailsToJSON(value?: PrivateServiceDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'disk': ResourceToJSON(value.disk),
        'env': ServiceEnvToJSON(value.env),
        'envSpecificDetails': WebServiceDetailsEnvSpecificDetailsToJSON(value.envSpecificDetails),
        'numInstances': value.numInstances,
        'openPorts': ((value.openPorts as Array<any>).map(ServerPortToJSON)),
        'parentServer': StaticSiteDetailsParentServerToJSON(value.parentServer),
        'plan': value.plan,
        'pullRequestPreviewsEnabled': value.pullRequestPreviewsEnabled,
        'region': RegionToJSON(value.region),
        'url': value.url,
    };
}

