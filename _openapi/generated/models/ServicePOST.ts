/* tslint:disable */
/* eslint-disable */
/**
 * Render Public API
 * Manage everything about your Render services
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@render.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.ts';
import type { ServicePOSTSecretFilesInner } from './ServicePOSTSecretFilesInner.ts';
import {
    ServicePOSTSecretFilesInnerFromJSON,
    ServicePOSTSecretFilesInnerFromJSONTyped,
    ServicePOSTSecretFilesInnerToJSON,
} from './ServicePOSTSecretFilesInner.ts';
import type { ServicePOSTServiceDetails } from './ServicePOSTServiceDetails.ts';
import {
    ServicePOSTServiceDetailsFromJSON,
    ServicePOSTServiceDetailsFromJSONTyped,
    ServicePOSTServiceDetailsToJSON,
} from './ServicePOSTServiceDetails.ts';
import type { ServiceType } from './ServiceType.ts';
import {
    ServiceTypeFromJSON,
    ServiceTypeFromJSONTyped,
    ServiceTypeToJSON,
} from './ServiceType.ts';
import type { UpdateEnvVarsForServiceRequestInner } from './UpdateEnvVarsForServiceRequestInner.ts';
import {
    UpdateEnvVarsForServiceRequestInnerFromJSON,
    UpdateEnvVarsForServiceRequestInnerFromJSONTyped,
    UpdateEnvVarsForServiceRequestInnerToJSON,
} from './UpdateEnvVarsForServiceRequestInner.ts';

/**
 * 
 * @export
 * @interface ServicePOST
 */
export interface ServicePOST {
    /**
     * 
     * @type {ServiceType}
     * @memberof ServicePOST
     */
    type: ServiceType;
    /**
     * 
     * @type {string}
     * @memberof ServicePOST
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ServicePOST
     */
    ownerId: string;
    /**
     * Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
     * @type {string}
     * @memberof ServicePOST
     */
    repo: string;
    /**
     * Defaults to "yes"
     * @type {string}
     * @memberof ServicePOST
     */
    autoDeploy?: ServicePOSTAutoDeployEnum;
    /**
     * If left empty, this will fall back to the default branch of the repository
     * @type {string}
     * @memberof ServicePOST
     */
    branch?: string;
    /**
     * 
     * @type {Array<UpdateEnvVarsForServiceRequestInner>}
     * @memberof ServicePOST
     */
    envVars?: Array<UpdateEnvVarsForServiceRequestInner>;
    /**
     * 
     * @type {Array<ServicePOSTSecretFilesInner>}
     * @memberof ServicePOST
     */
    secretFiles?: Array<ServicePOSTSecretFilesInner>;
    /**
     * 
     * @type {ServicePOSTServiceDetails}
     * @memberof ServicePOST
     */
    serviceDetails?: ServicePOSTServiceDetails;
}


/**
 * @export
 */
export const ServicePOSTAutoDeployEnum = {
    TRUE: 'true',
    FALSE: 'false',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
} as const;
export type ServicePOSTAutoDeployEnum = typeof ServicePOSTAutoDeployEnum[keyof typeof ServicePOSTAutoDeployEnum];


/**
 * Check if a given object implements the ServicePOST interface.
 */
export function instanceOfServicePOST(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "ownerId" in value;
    isInstance = isInstance && "repo" in value;

    return isInstance;
}

export function ServicePOSTFromJSON(json: any): ServicePOST {
    return ServicePOSTFromJSONTyped(json, false);
}

export function ServicePOSTFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServicePOST {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': ServiceTypeFromJSON(json['type']),
        'name': json['name'],
        'ownerId': json['ownerId'],
        'repo': json['repo'],
        'autoDeploy': !exists(json, 'autoDeploy') ? undefined : json['autoDeploy'],
        'branch': !exists(json, 'branch') ? undefined : json['branch'],
        'envVars': !exists(json, 'envVars') ? undefined : ((json['envVars'] as Array<any>).map(UpdateEnvVarsForServiceRequestInnerFromJSON)),
        'secretFiles': !exists(json, 'secretFiles') ? undefined : ((json['secretFiles'] as Array<any>).map(ServicePOSTSecretFilesInnerFromJSON)),
        'serviceDetails': !exists(json, 'serviceDetails') ? undefined : ServicePOSTServiceDetailsFromJSON(json['serviceDetails']),
    };
}

export function ServicePOSTToJSON(value?: ServicePOST | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': ServiceTypeToJSON(value.type),
        'name': value.name,
        'ownerId': value.ownerId,
        'repo': value.repo,
        'autoDeploy': value.autoDeploy,
        'branch': value.branch,
        'envVars': value.envVars === undefined ? undefined : ((value.envVars as Array<any>).map(UpdateEnvVarsForServiceRequestInnerToJSON)),
        'secretFiles': value.secretFiles === undefined ? undefined : ((value.secretFiles as Array<any>).map(ServicePOSTSecretFilesInnerToJSON)),
        'serviceDetails': ServicePOSTServiceDetailsToJSON(value.serviceDetails),
    };
}

