/* tslint:disable */
/* eslint-disable */
/**
 * Render Public API
 * Manage everything about your Render services
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@render.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.ts';
import type { NotifySetting } from './NotifySetting.ts';
import {
    NotifySettingFromJSON,
    NotifySettingFromJSONTyped,
    NotifySettingToJSON,
} from './NotifySetting.ts';
import type { ServiceServiceDetails } from './ServiceServiceDetails.ts';
import {
    ServiceServiceDetailsFromJSON,
    ServiceServiceDetailsFromJSONTyped,
    ServiceServiceDetailsToJSON,
} from './ServiceServiceDetails.ts';
import type { ServiceType } from './ServiceType.ts';
import {
    ServiceTypeFromJSON,
    ServiceTypeFromJSONTyped,
    ServiceTypeToJSON,
} from './ServiceType.ts';
import type { SuspenderType } from './SuspenderType.ts';
import {
    SuspenderTypeFromJSON,
    SuspenderTypeFromJSONTyped,
    SuspenderTypeToJSON,
} from './SuspenderType.ts';

/**
 * 
 * @export
 * @interface Service
 */
export interface Service {
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    autoDeploy: ServiceAutoDeployEnum;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    branch: string;
    /**
     * 
     * @type {Date}
     * @memberof Service
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    name: string;
    /**
     * 
     * @type {NotifySetting}
     * @memberof Service
     */
    notifyOnFail: NotifySetting;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    ownerId: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    repo?: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    slug: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    suspended: ServiceSuspendedEnum;
    /**
     * 
     * @type {Array<SuspenderType>}
     * @memberof Service
     */
    suspenders: Array<SuspenderType>;
    /**
     * 
     * @type {ServiceType}
     * @memberof Service
     */
    type: ServiceType;
    /**
     * 
     * @type {Date}
     * @memberof Service
     */
    updatedAt: Date;
    /**
     * 
     * @type {ServiceServiceDetails}
     * @memberof Service
     */
    serviceDetails: ServiceServiceDetails;
}


/**
 * @export
 */
export const ServiceAutoDeployEnum = {
    TRUE: 'true',
    FALSE: 'false',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
} as const;
export type ServiceAutoDeployEnum = typeof ServiceAutoDeployEnum[keyof typeof ServiceAutoDeployEnum];

/**
 * @export
 */
export const ServiceSuspendedEnum = {
    SUSPENDED: 'suspended',
    NOT_SUSPENDED: 'not_suspended',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
} as const;
export type ServiceSuspendedEnum = typeof ServiceSuspendedEnum[keyof typeof ServiceSuspendedEnum];


/**
 * Check if a given object implements the Service interface.
 */
export function instanceOfService(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "autoDeploy" in value;
    isInstance = isInstance && "branch" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "notifyOnFail" in value;
    isInstance = isInstance && "ownerId" in value;
    isInstance = isInstance && "slug" in value;
    isInstance = isInstance && "suspended" in value;
    isInstance = isInstance && "suspenders" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "serviceDetails" in value;

    return isInstance;
}

export function ServiceFromJSON(json: any): Service {
    return ServiceFromJSONTyped(json, false);
}

export function ServiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Service {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'autoDeploy': json['autoDeploy'],
        'branch': json['branch'],
        'createdAt': (new Date(json['createdAt'])),
        'name': json['name'],
        'notifyOnFail': NotifySettingFromJSON(json['notifyOnFail']),
        'ownerId': json['ownerId'],
        'repo': !exists(json, 'repo') ? undefined : json['repo'],
        'slug': json['slug'],
        'suspended': json['suspended'],
        'suspenders': ((json['suspenders'] as Array<any>).map(SuspenderTypeFromJSON)),
        'type': ServiceTypeFromJSON(json['type']),
        'updatedAt': (new Date(json['updatedAt'])),
        'serviceDetails': ServiceServiceDetailsFromJSON(json['serviceDetails']),
    };
}

export function ServiceToJSON(value?: Service | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'autoDeploy': value.autoDeploy,
        'branch': value.branch,
        'createdAt': (value.createdAt.toISOString()),
        'name': value.name,
        'notifyOnFail': NotifySettingToJSON(value.notifyOnFail),
        'ownerId': value.ownerId,
        'repo': value.repo,
        'slug': value.slug,
        'suspended': value.suspended,
        'suspenders': ((value.suspenders as Array<any>).map(SuspenderTypeToJSON)),
        'type': ServiceTypeToJSON(value.type),
        'updatedAt': (value.updatedAt.toISOString()),
        'serviceDetails': ServiceServiceDetailsToJSON(value.serviceDetails),
    };
}

