/* tslint:disable */
/* eslint-disable */
/**
 * Render Public API
 * Manage everything about your Render services
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@render.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.ts';
import type { DeployCommit } from './DeployCommit.ts';
import {
    DeployCommitFromJSON,
    DeployCommitFromJSONTyped,
    DeployCommitToJSON,
} from './DeployCommit.ts';

/**
 * 
 * @export
 * @interface Deploy
 */
export interface Deploy {
    /**
     * 
     * @type {string}
     * @memberof Deploy
     */
    id: string;
    /**
     * 
     * @type {DeployCommit}
     * @memberof Deploy
     */
    commit?: DeployCommit;
    /**
     * 
     * @type {string}
     * @memberof Deploy
     */
    status?: DeployStatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof Deploy
     */
    finishedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Deploy
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Deploy
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const DeployStatusEnum = {
    CREATED: 'created',
    BUILD_IN_PROGRESS: 'build_in_progress',
    UPDATE_IN_PROGRESS: 'update_in_progress',
    LIVE: 'live',
    DEACTIVATED: 'deactivated',
    BUILD_FAILED: 'build_failed',
    UPDATE_FAILED: 'update_failed',
    CANCELED: 'canceled',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
} as const;
export type DeployStatusEnum = typeof DeployStatusEnum[keyof typeof DeployStatusEnum];


/**
 * Check if a given object implements the Deploy interface.
 */
export function instanceOfDeploy(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function DeployFromJSON(json: any): Deploy {
    return DeployFromJSONTyped(json, false);
}

export function DeployFromJSONTyped(json: any, ignoreDiscriminator: boolean): Deploy {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'commit': !exists(json, 'commit') ? undefined : DeployCommitFromJSON(json['commit']),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'finishedAt': !exists(json, 'finishedAt') ? undefined : (new Date(json['finishedAt'])),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function DeployToJSON(value?: Deploy | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'commit': DeployCommitToJSON(value.commit),
        'status': value.status,
        'finishedAt': value.finishedAt === undefined ? undefined : (value.finishedAt.toISOString()),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

